import logging
import json
import os
from datetime import datetime, date
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes

# üîë –¢–í–û–ô –¢–û–ö–ï–ù ‚Äî —É–∂–µ –≤—Å—Ç–∞–≤–ª–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")

# üìÇ –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
PROGRESS_FILE = "progress.json"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ===

def load_progress():
    if os.path.exists(PROGRESS_FILE):
        with open(PROGRESS_FILE, "r") as f:
            return json.load(f)
    return {"days": []}

def save_progress(data):
    with open(PROGRESS_FILE, "w") as f:
        json.dump(data, f)

def days_this_week(days):
    today = date.today()
    week_num = today.isocalendar()[1]
    return sum(1 for day in days if datetime.strptime(day, "%Y-%m-%d").date().isocalendar()[1] == week_num)

# === –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é ===

def main_menu():
    keyboard = [
        [InlineKeyboardButton("üìã –ß–µ–∫-–ª–∏—Å—Ç", callback_data="checklist")],
        [InlineKeyboardButton("üíä –î–æ–±–∞–≤–∫–∏", callback_data="supplements")],
        [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å", callback_data="track")],
        [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫", callback_data="reset")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    return InlineKeyboardMarkup(keyboard)

# === –ö–æ–º–∞–Ω–¥—ã ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Recovery Bot.\n–í—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ üëá",
        reply_markup=main_menu()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = load_progress()

    if query.data == "checklist":
        text = (
            "üìã –ß–µ–∫-–ª–∏—Å—Ç –Ω–∞ 30 –¥–Ω–µ–π:\n"
            "1‚Äì7 –¥–µ–Ω—å: –≤–æ–¥–∞, —Å–æ–Ω, –º–∞–≥–Ω–∏–π\n"
            "8‚Äì14 –¥–µ–Ω—å: —Ç–∏—Ä–æ–∑–∏–Ω, –∞–¥–∞–ø—Ç–æ–≥–µ–Ω—ã\n"
            "15‚Äì30 –¥–µ–Ω—å: —Å–ø–æ—Ä—Ç, –¥–Ω–µ–≤–Ω–∏–∫"
        )
    elif query.data == "supplements":
        text = (
            "üíä –¢–∞–±–ª–∏—Ü–∞ –¥–æ–±–∞–≤–æ–∫:\n"
            "–ú–∞–≥–Ω–∏–π ‚Äî 200‚Äì400 –º–≥\n"
            "–í–∏—Ç–∞–º–∏–Ω—ã B ‚Äî —É—Ç—Ä–æ–º\n"
            "–û–º–µ–≥–∞-3 ‚Äî 1000 –º–≥"
        )
    elif query.data == "track":
        today = date.today().isoformat()
        if today in data["days"]:
            text = "‚úÖ –¢—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª —ç—Ç–æ—Ç –¥–µ–Ω—å! –ú–æ–ª–æ–¥–µ—Ü!"
        else:
            data["days"].append(today)
            save_progress(data)
            text = "‚úÖ –î–µ–Ω—å –æ—Ç–º–µ—á–µ–Ω! –¢—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ üí™"
    elif query.data == "reset":
        data["days"] = []
        save_progress(data)
        text = "üîÑ –°—á—ë—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ ‚Äî —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è!"
    elif query.data == "stats":
        week_count = days_this_week(data["days"])
        total = len(data["days"])
        text = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–í—Å–µ–≥–æ –¥–Ω–µ–π –æ—Ç–º–µ—á–µ–Ω–æ: {total}\n"
            f"–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ: {week_count} –¥–Ω–µ–π\n"
            f"–¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–π! üí™"
        )
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."

    await query.edit_message_text(text, reply_markup=main_menu())

# === –ó–∞–ø—É—Å–∫ ===

def main():
    app = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
